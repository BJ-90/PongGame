# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = True
RIGHT = False
ball_pos = [WIDTH/2, HEIGHT/2]
ball_vel = [0, 0]
paddle1_pos = [0, 0]
paddle2_pos = [600, 0]
paddle1_vel = [0, 0]
paddle2_vel = [0, 0]
score1 = 0
score2 = 0

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    # Update ball position and ball velocity everytime when ball touches gutters
    ball_pos = [WIDTH/2, HEIGHT/2]
    ball_vel[0] = 0.02 * random.randrange(120, 240)
    ball_vel[1] = 0.02 * random.randrange(60, 180)
    if direction == LEFT:
        ball_vel[1] = -ball_vel[1]
        ball_vel[0] = -ball_vel[0]
    elif direction == RIGHT:
        ball_vel[1] = -ball_vel[1]
        #ball_vel[0] = -ball_vel[0]
    


# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    score1 = 0
    score2 = 0
    direction = random.choice([LEFT, RIGHT])
    spawn_ball(direction)
def stop():
    global ball_vel
    ball_vel = [0, 0]

    
def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
    # Update ball position
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    # ball collides with and bounces off of the top and bottom walls
    if ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = -ball_vel[1]
    elif ball_pos[1] >= (HEIGHT-1) - BALL_RADIUS:
        ball_vel[1] = -ball_vel[1]
    
 
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
         
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 2, 'Grey', 'White')
    
    # update paddle's vertical position, keep paddle on the screen
    paddle1_pos[1] += paddle1_vel[1]
    paddle2_pos[1] += paddle2_vel[1]
    
    
    if paddle2_pos[1] >= HEIGHT - PAD_HEIGHT:
        paddle2_vel[1] = 0
        paddle2_pos = [600, HEIGHT - PAD_HEIGHT]
    elif paddle2_pos[1] <= 0:
        paddle2_vel[1] = 0
        paddle2_pos = [600, 0]
    if paddle1_pos[1] >= HEIGHT - PAD_HEIGHT:
        paddle1_vel[1] = 0
        paddle1_pos = [0, HEIGHT - PAD_HEIGHT]
    elif paddle1_pos[1] <= 0:
        paddle1_vel[1] = 0
        paddle1_pos = [0, 0]
            
            
          
    
        
    # draw paddles
    canvas.draw_polygon([(paddle1_pos), (paddle1_pos[0]+PAD_WIDTH, paddle1_pos[1]), (paddle1_pos[0]+PAD_WIDTH, paddle1_pos[1]+PAD_HEIGHT), (paddle1_pos[0], paddle1_pos[1]+PAD_HEIGHT)],1, 'Yellow', 'White')
    canvas.draw_polygon([(paddle2_pos), (paddle2_pos[0]-PAD_WIDTH, paddle2_pos[1]), (paddle2_pos[0]-PAD_WIDTH, paddle2_pos[1]+PAD_HEIGHT), (paddle2_pos[0], paddle2_pos[1]+PAD_HEIGHT)],1, 'Yellow', 'White')

    # determine whether paddle and ball collide, and what happen if ball touches gutter
    a = ball_pos[1] >= paddle1_pos[1]
    b = ball_pos[1] <= paddle1_pos[1] + PAD_HEIGHT
    c = ball_pos[0] <= BALL_RADIUS + PAD_WIDTH
    x = ball_pos[1] >= paddle2_pos[1]
    y = ball_pos[1] <= paddle2_pos[1] + PAD_HEIGHT
    z = ball_pos[0] >= (WIDTH-1)-BALL_RADIUS-PAD_WIDTH
    # Increase 10% velocity after each collision
    accel = 0.1 
    if a and b and c:
        ball_vel[0] = -((accel * ball_vel[0]) + ball_vel[0])
        ball_vel[1] = ((accel * ball_vel[1]) + ball_vel[1])
        
    elif ball_pos[0] <= BALL_RADIUS + PAD_WIDTH:
        score2 += 1
        spawn_ball(RIGHT)
    elif x and y and z:
        ball_vel[0] = -((accel * ball_vel[0]) + ball_vel[0])
        ball_vel[1] = ((accel * ball_vel[1]) + ball_vel[1])
    elif ball_pos[0] >= (WIDTH-1)-BALL_RADIUS-PAD_WIDTH:
        score1 += 1
        spawn_ball(LEFT)
   
    
    # draw scores
    canvas.draw_text(str(score1), (WIDTH/4.0, HEIGHT/4.0), 50, 'White')
    canvas.draw_text(str(score2), ((3.0/4)*WIDTH, (1.0/4)*HEIGHT), 50, 'White')
        
def keydown(key):
    global paddle1_vel, paddle2_vel
    acc = 7
    if key == simplegui.KEY_MAP['s']:
        paddle1_vel[1] = acc
    elif key == simplegui.KEY_MAP['w']:
        paddle1_vel[1] = -acc
    if key == simplegui.KEY_MAP['down']:
        paddle2_vel[1] = acc
    elif key == simplegui.KEY_MAP['up']:
        paddle2_vel[1] = -acc
        
        


def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP['s']:
        paddle1_vel[1] = 0
    elif key == simplegui.KEY_MAP['w']:
        paddle1_vel[1] = 0
    if key == simplegui.KEY_MAP['down']:
        paddle2_vel[1] = 0
    elif key == simplegui.KEY_MAP['up']:
        paddle2_vel[1] = 0
    
# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button('Start', new_game) # I use here start button to start the game, instead of automatic start
frame.add_button('Restart', new_game)
frame.add_button('Stop', stop)


# start frame
#new_game()
frame.start()
